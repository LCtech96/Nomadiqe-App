// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(TRAVELER)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile fields
  bio           String?
  location      String?
  phone         String?
  isVerified    Boolean   @default(false)

  // Host specific fields
  hostProfile   HostProfile?

  // Traveler specific fields
  travelerProfile TravelerProfile?

  // Relationships
  properties    Property[]
  bookings      Booking[]
  reviews       Review[]
  followers     Follow[]   @relation("UserFollowers")
  following     Follow[]   @relation("UserFollowing")
  likes         Like[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model HostProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String?
  taxId       String?
  bankAccount String?
  cryptoWallet String?
  commission  Float    @default(0.05) // 5% commission
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("host_profiles")
}

model TravelerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferences Json?    // Travel preferences
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("traveler_profiles")
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  type        PropertyType
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  price       Float
  currency    String   @default("EUR")
  maxGuests   Int
  bedrooms    Int
  bathrooms   Int
  amenities   String[]
  images      String[]
  rules       String[]
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  hostId      String
  host        User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  reviews     Review[]
  likes       Like[]
  availability Availability[]

  @@map("properties")
}

model Availability {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  date       DateTime
  isAvailable Boolean  @default(true)
  price      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([propertyId, date])
  @@map("availability")
}

model Booking {
  id          String        @id @default(cuid())
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalPrice  Float
  currency    String        @default("EUR")
  status      BookingStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  travelerId  String
  traveler    User          @relation(fields: [travelerId], references: [id], onDelete: Cascade)
  payment     Payment?
  review      Review?

  @@map("bookings")
}

model Payment {
  id          String        @id @default(cuid())
  amount      Float
  currency    String
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  transactionId String?
  cryptoAmount Float?
  cryptoCurrency String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relationships
  bookingId   String        @unique
  booking     Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  reviewerId  String
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Like {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relationships
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@map("likes")
}

model Follow {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())

  // Relationships
  followerId String
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following  User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model LocalExperience {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  location    String
  price       Float?
  currency    String   @default("EUR")
  images      String[]
  contactInfo String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("local_experiences")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Enums
enum UserRole {
  HOST
  TRAVELER
  ADMIN
}

enum PropertyType {
  APARTMENT
  HOUSE
  VILLA
  BNB
  HOTEL
  HOSTEL
  CABIN
  TENT
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  REFUNDED
}

enum PaymentMethod {
  STRIPE
  COINBASE
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}
